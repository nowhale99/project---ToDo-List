(()=>{"use strict";var n={28:(n,e,t)=>{t.d(e,{Z:()=>a});var r=t(537),o=t.n(r),i=t(645),d=t.n(i)()(o());d.push([n.id,"html, body {\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\nbody{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height:100vh;\n    width:100vw;\n    background: linear-gradient(rgba(250, 128, 114, 0.692), rgba(255, 160, 122, 0.342));\n}\n#container{\nwidth: 100%;\nheight: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\n\nh1{\n    flex: 1\n}\n\n.projects{\n    width: 95%;\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    overflow-x: auto;\n    overflow-y: hidden;\n}\n\n.project{\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    border: 2px solid white;\n    cursor: pointer;\n    border-radius: 10px;\n    padding: 10px;\n    margin: 10px 10px;\n    text-wrap: nowrap;\n}\n\n.main{\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    height: 80%;\n}\n.buttons{\n    display: flex;\n    flex-direction: column;\n    margin: 20px 50px 20px 50px;\n    justify-content: center;\n}\n.todo-grid{\n    overflow-y:auto;\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    grid-template-rows: repeat(3, 1fr);\n    gap: 15px;\n    margin: 10px;\n    padding: 10px;\n    border-radius: 25px;\n    width: 665px;\n    height: 450px;\n    background: linear-gradient(lightskyblue, rgb(191, 230, 255));\n}\n.displayBtn{\n    margin: 30px 0;\n    border-radius: 15px;\n    border: none;\n    font-weight: bold;\n    cursor: pointer;\n    width: 120px;\n    height: 60px;\n    background: linear-gradient(lightskyblue, rgb(191, 230, 255))\n}\n\n.deleteBtn, .delete-todo{\n    border-radius: 50%;\n    background-color: brown;\n    color: white;\n    border: none;\n    margin-left: 10px;\n    cursor: pointer;\n}\n.del-but-row{\n    display: flex;\n    justify-content: end;\n}\n\n.current-project{\n    border: 2px solid slateblue;\n}\n\n\n.todo{\n    display: flex;\n    flex-direction: column;\n    border: none;\n    border-radius: 20px;\n    padding: 10px;\n}\n\n.rewrite-todo{\n    border-radius: 20px;\n    border:none;\n}\n\n.green-todo{\n    background: linear-gradient(rgb(49, 255, 49) ,rgb(0, 104, 0));\n}\n\n.yellow-todo{\n    background: linear-gradient(rgb(255, 255, 95), rgb(255, 255, 0));\n}\n\n.red-todo{\n    background: linear-gradient(rgb(243, 79, 79), rgb(185, 0, 0));\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,gBAAgB;AACpB;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,YAAY;IACZ,WAAW;IACX,mFAAmF;AACvF;AACA;AACA,WAAW;AACX,YAAY;AACZ,aAAa;AACb,sBAAsB;AACtB,mBAAmB;AACnB;;AAEA;IACI;AACJ;;AAEA;IACI,UAAU;IACV,aAAa;IACb,aAAa;IACb,mBAAmB;IACnB,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,uBAAuB;IACvB,eAAe;IACf,mBAAmB;IACnB,aAAa;IACb,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,WAAW;IACX,WAAW;AACf;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,2BAA2B;IAC3B,uBAAuB;AAC3B;AACA;IACI,eAAe;IACf,aAAa;IACb,qCAAqC;IACrC,kCAAkC;IAClC,SAAS;IACT,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,YAAY;IACZ,aAAa;IACb,6DAA6D;AACjE;AACA;IACI,cAAc;IACd,mBAAmB;IACnB,YAAY;IACZ,iBAAiB;IACjB,eAAe;IACf,YAAY;IACZ,YAAY;IACZ;AACJ;;AAEA;IACI,kBAAkB;IAClB,uBAAuB;IACvB,YAAY;IACZ,YAAY;IACZ,iBAAiB;IACjB,eAAe;AACnB;AACA;IACI,aAAa;IACb,oBAAoB;AACxB;;AAEA;IACI,2BAA2B;AAC/B;;;AAGA;IACI,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,mBAAmB;IACnB,aAAa;AACjB;;AAEA;IACI,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,6DAA6D;AACjE;;AAEA;IACI,gEAAgE;AACpE;;AAEA;IACI,6DAA6D;AACjE",sourcesContent:["html, body {\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\nbody{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height:100vh;\n    width:100vw;\n    background: linear-gradient(rgba(250, 128, 114, 0.692), rgba(255, 160, 122, 0.342));\n}\n#container{\nwidth: 100%;\nheight: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\n\nh1{\n    flex: 1\n}\n\n.projects{\n    width: 95%;\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    overflow-x: auto;\n    overflow-y: hidden;\n}\n\n.project{\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    border: 2px solid white;\n    cursor: pointer;\n    border-radius: 10px;\n    padding: 10px;\n    margin: 10px 10px;\n    text-wrap: nowrap;\n}\n\n.main{\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    height: 80%;\n}\n.buttons{\n    display: flex;\n    flex-direction: column;\n    margin: 20px 50px 20px 50px;\n    justify-content: center;\n}\n.todo-grid{\n    overflow-y:auto;\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    grid-template-rows: repeat(3, 1fr);\n    gap: 15px;\n    margin: 10px;\n    padding: 10px;\n    border-radius: 25px;\n    width: 665px;\n    height: 450px;\n    background: linear-gradient(lightskyblue, rgb(191, 230, 255));\n}\n.displayBtn{\n    margin: 30px 0;\n    border-radius: 15px;\n    border: none;\n    font-weight: bold;\n    cursor: pointer;\n    width: 120px;\n    height: 60px;\n    background: linear-gradient(lightskyblue, rgb(191, 230, 255))\n}\n\n.deleteBtn, .delete-todo{\n    border-radius: 50%;\n    background-color: brown;\n    color: white;\n    border: none;\n    margin-left: 10px;\n    cursor: pointer;\n}\n.del-but-row{\n    display: flex;\n    justify-content: end;\n}\n\n.current-project{\n    border: 2px solid slateblue;\n}\n\n\n.todo{\n    display: flex;\n    flex-direction: column;\n    border: none;\n    border-radius: 20px;\n    padding: 10px;\n}\n\n.rewrite-todo{\n    border-radius: 20px;\n    border:none;\n}\n\n.green-todo{\n    background: linear-gradient(rgb(49, 255, 49) ,rgb(0, 104, 0));\n}\n\n.yellow-todo{\n    background: linear-gradient(rgb(255, 255, 95), rgb(255, 255, 0));\n}\n\n.red-todo{\n    background: linear-gradient(rgb(243, 79, 79), rgb(185, 0, 0));\n}"],sourceRoot:""}]);const a=d},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var d={};if(r)for(var a=0;a<this.length;a++){var s=this[a][0];null!=s&&(d[s]=!0)}for(var A=0;A<n.length;A++){var c=[].concat(n[A]);r&&d[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),e.push(c))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},d=[],a=0;a<n.length;a++){var s=n[a],A=r.base?s[0]+r.base:s[0],c=i[A]||0,l="".concat(A," ").concat(c);i[A]=c+1;var p=t(l),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=o(u,r);r.byIndex=a,e.splice(a,0,{identifier:l,updater:m,references:1})}d.push(l)}return d}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var d=0;d<i.length;d++){var a=t(i[d]);e[a].references--}for(var s=r(n,o),A=0;A<i.length;A++){var c=t(i[A]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}i=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),i=t(569),d=t.n(i),a=t(565),s=t.n(a),A=t(216),c=t.n(A),l=t(589),p=t.n(l),u=t(28),m={};m.styleTagTransform=p(),m.setAttributes=s(),m.insert=d().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=c(),e()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;let f=[],g=1;function C(n,e,t,r){return{name:n,todos:e,id:t,state:r}}function b(n){const e=f.filter((e=>e.id!=n));for(let n=0;n<e.length;n++)e[n].state=0===n;f=e}function h(n){for(let e=0;e<f.length;e++)f[e].id!==n?f[e].state=!1:f[e].state=!0}function x(n,e){let t=n.todos.find((n=>n===e));t.title=prompt("Title"),t.description=prompt("Description"),t.dueDate=prompt("Due Date"),t.priority=function(){let n=Number(prompt("Priority"));return n<1?n=1:n>3&&(n=3),n}()}function B(n,e){n.todos=n.todos.filter((n=>n!=e))}function I(){const n=document.getElementById("grid");n.innerHTML="";const e=f.find((n=>!0===n.state));for(let t=0;t<e.todos.length;t++){const r=document.createElement("div");r.classList.add("todo"),n.appendChild(r);const o=document.createElement("div");o.classList.add("del-but-row"),r.appendChild(o);const i=document.createElement("button");i.innerText="red.",i.classList.add("rewrite-todo"),i.addEventListener("click",(()=>{x(e,e.todos[t]),I()})),o.appendChild(i);const d=document.createElement("button");d.innerText="x",d.classList.add("delete-todo"),d.addEventListener("click",(()=>{B(e,e.todos[t]),I()})),o.appendChild(d);const a=document.createElement("h2");a.innerText=e.todos[t].title,r.appendChild(a);const s=document.createElement("p");s.innerText=e.todos[t].description,r.appendChild(s);const A=document.createElement("p");A.innerText=e.todos[t].dueDate,r.appendChild(A),1===e.todos[t].priority?r.classList.add("green-todo"):2===e.todos[t].priority&&r.classList.add("yellow-todo"),3===e.todos[t].priority&&r.classList.add("red-todo")}}function y(){document.getElementById("projects").innerHTML="";for(let n=0;n<f.length;n++){const e=document.createElement("div");e.classList.add("project"),e.innerText=f[n].name,!0===f[n].state?e.classList.add("current-project"):e.classList.remove("current-project"),e.addEventListener("click",(()=>{h(f[n].id);for(let n=0;n<f.length;n++)!0===f[n].state?e.classList.add("current-project"):e.classList.remove("current-project");y(),I(),console.log(f)})),document.getElementById("projects").appendChild(e);const t=document.createElement("button");t.innerText="x",t.classList.add("deleteBtn"),t.addEventListener("click",(()=>{b(f[n].id),document.getElementById("projects").removeChild(e),y()})),e.appendChild(t)}document.getElementById("grid").innerHTML=""}f.push(C("Default project",[],g,!0)),g+=1;const v=document.getElementById("container");!function(){const n=document.createElement("h1");n.innerText="To do do dooo list",v.appendChild(n);const e=document.createElement("div");e.classList.add("projects"),e.id="projects",v.appendChild(e);const t=document.createElement("div");t.classList.add("main"),v.appendChild(t);const r=document.createElement("div");r.classList.add("buttons"),t.appendChild(r);const o=document.createElement("button");o.innerText="Add Todo",o.classList.add("displayBtn"),o.addEventListener("click",(()=>{0===f.length?alert("Add at least one project to create todo in it"):f.find((n=>!0===n.state)).todos.push({title:prompt("Title"),description:prompt("Description"),dueDate:prompt("Due Date"),priority:function(){let n=Number(prompt("Priority"));return n<1?n=1:n>3&&(n=3),n}()}),I()})),r.appendChild(o);const i=document.createElement("button");i.innerText="Add Project",i.classList.add("displayBtn"),i.addEventListener("click",(()=>{!function(){for(let n=0;n<f.length;n++)f[n].state=!1;const n=C(prompt("Project Title:"),[],g,!0);f.push(n),g+=1}(),y()})),r.appendChild(i);const d=document.createElement("div");d.classList.add("todo-grid"),d.id="grid",t.appendChild(d),y()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,